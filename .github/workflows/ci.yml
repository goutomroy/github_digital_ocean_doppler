name: Flask CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: developement # Keep this enabled for proper context
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Doppler CLI and Fetch Secrets
      uses: dopplerhq/cli-action@v3 # Confirmed by you
      with:
        doppler-token: ${{ secrets.DOPPLER_TOKEN }}
    # --- SWITCHING TO secrets-fetch-action ---
    - name: Fetch Doppler Secrets
      uses: DopplerHQ/secrets-fetch-action@v1.3.0 # Use a specific version, e.g., v1.0.0 or check latest tag
      with:
        doppler-token: ${{ secrets.DOPPLER_TOKEN }}
        # IMPORTANT: Input parameter names are 'project' and 'config' (NOT 'doppler-project'/'doppler-config')
        doppler-project: ${{ secrets.DOPPLER_PROJECT }}
        doppler-config: ${{ secrets.DOPPLER_CONFIG }}
        # No 'doppler-debug' for this action, it's for cli-action.
        # This action automatically exports secrets as environment variables for subsequent steps.

    # --- Keep this diagnostic step to verify ---
    - name: Verify Environment Variables After Doppler Action
      run: |
        echo "--- Environment variables after Doppler action ---"
        # Print ALL environment variables to ensure nothing is missed by grep
        printenv # Remove grep to see EVERYTHING that's injected by the action
        echo "--- End Environment variables verification ---"
      shell: bash

    - name: start docker compose for databases
      # This step should now find secrets in the environment
      run: docker compose up -d
      timeout-minutes: 5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests
      run: |
        echo "REDIS_URL from env in GitHub Action: $REDIS_URL"
        python3 -m unittest